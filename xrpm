#!/bin/env python3

from os import X_OK, access, getenv, makedirs, path
from pathlib import Path
from pyedid import Optional, parse_edid
from sys import argv, stderr
from typing import Dict, List, Set

import re
import shlex
import subprocess

OUTPUT_REGEX = r"""
^\s*
(?P<name>[^ ]+)\s*
(?P<state>connected|disconnected|unknown\ connection).*[\r\n]+
(?:^\t(?:
EDID:\s*(?P<edid>(?:\t{2}[a-z0-9]+[\r\n]+)+) |
[\w\- ]+:\s*.*[\r\n]+
(?:\t\tsupported:\s*.*[\r\n]+)?
(?:\t\trange:\s*.*[\r\n]+)?
))+
(?:^(?:\s+\d+x\d+.*)+)?
"""
PROFILE_REGEX = r"""
^(?:(?P<type>name|serial)\s+)?
(?P<name>[\w-]+)\s+
(?P<edids>(?:[0-9a-z]+,?)+)\s+
(?P<args>.*)$
"""

DRY_RUN = getenv("XRPM_DRYRUN", "") != ""
CONFIG_PATH = getenv("XRPM_CONFIG",
                     str(Path.home().joinpath("./.xrpm/profiles")))
AFTER_PATH = getenv("XRPM_AFTER", str(Path.home().joinpath("./.xrpm/after")))
USAGE = f"""Usage: '{argv[0]} [ACTION [ACTION ARGS...]]'
Try '{argv[0]} help' for more information"""
HELP = f"""NAME
    xrpm - XRandr Profile Manager

SYNOPSIS
    {argv[0]}
    {argv[0]} [ACTION [ACTION ARGS...]]

ACTIONS
    status
        show saved and detected profiles (default)
    save [--serial] NAME XRANDR_ARGS...
        create a new profile for connected monitors (matches monitor name by
        default, use option `--serial` to match monitor serial numbers)
    delete NAME
        delete the profile NAME
    set NAME
        load profile NAME and execute after script
    copy [--serial] SRC_NAME DST_NAME
        copy XRandR args from a profile NAME and save it as COPY_NAME
    auto
        load the first detected profile or xrandr --auto if no profile is
        detected and execute after script
    help
        show this help

AUTHOR
    Juraj Marcin <juraj@jurajmarcin.com>"""


def run_command(argv: List[str]) -> None:
    if DRY_RUN:
        print(" ".join(argv))
    else:
        subprocess.run(argv, check=True)


class Output:
    def __init__(self, name: str, connected: bool, edid: str):
        self.name = name
        self.connected = connected
        self.edid = edid

    def __str__(self) -> str:
        if self.connected:
            return f"Output {self.name} connected to {self.edid}"
        return f"Output {self.name} disconnected"

    def __repr__(self) -> str:
        return str(self)

    @staticmethod
    def parse_outputs(text: str) -> List["Output"]:
        outputs: List[Output] = []
        matches = re.finditer(OUTPUT_REGEX, text, re.MULTILINE | re.VERBOSE)
        for match in matches:
            name, state, edid = match.group("name", "state", "edid")
            connected = state == "connected"
            if connected and not edid:
                print(f"Output {name} is connected, but EDID is unknown",
                      file=stderr)
            edid = re.sub(r"\s", "", edid) if edid else ""
            outputs.append(Output(name, connected, edid))
        return outputs

    @staticmethod
    def load_outputs() -> List["Output"]:
        p = subprocess.run(["xrandr", "--properties"], stdout=subprocess.PIPE,
                           text=True, check=True)
        return Output.parse_outputs(str(p.stdout))

    @staticmethod
    def connected_edids(outputs: List["Output"]) -> Set[str]:
        return set(map(lambda o: o.edid,
                       filter(lambda o: o.connected and o.edid, outputs)))
    @staticmethod
    def connected_names(outputs: List["Output"]) -> Set[str | int | None]:
        return set(map(lambda e: e.name if e.name else e.serial,
                       map(lambda o: parse_edid(o.edid),
                           filter(lambda o: o.connected and o.edid, outputs))))

    @staticmethod
    def connected_serials(outputs: List["Output"]) -> Set[str | int]:
        return set(map(lambda o: parse_edid(o.edid).serial,
                       filter(lambda o: o.connected and o.edid, outputs)))


class Profile:
    TYPE_NAME = 'name'
    TYPE_SERIAL = 'serial'

    def __init__(self, type: str, name: str, edids: Set[str],
                 args: List[str]):
        self.type = type
        self.name = name
        self.edids = edids
        self.args = args

    def output_names(self) -> Set[str | int | None]:
        return set(map(lambda e: e.name if e.name else e.serial,
                       map(parse_edid, self.edids)))

    def output_serials(self) -> Set[str | int]:
        return set(map(lambda e: parse_edid(e).serial, self.edids))

    def set_profile(self, outputs: List[Output]) -> None:
        print(f"Setting profile {self.name}")
        run_command(["xrandr"] + self.args
                    + [ x for output in outputs if output.name not in self.args
                       for x in ["--output", output.name, "--off"]])
        if access(AFTER_PATH, X_OK):
            print("Running after scripts")
            run_command([AFTER_PATH])

    def is_detected(self, outputs: List[Output]) -> Optional[str]:
        if self.type == Profile.TYPE_NAME \
                and Output.connected_names(outputs) == self.output_names():
            return Profile.TYPE_NAME
        if self.type == Profile.TYPE_SERIAL \
                and Output.connected_serials(outputs) == self.output_serials():
            return Profile.TYPE_SERIAL
        return None

    def serialize(self) -> str:
        return f"{self.name} {','.join(self.edids)} " \
            + f"{shlex.join(self.args)}\n"

    def __str__(self) -> str:
        return f"Profile {self.name}"

    def __repr__(self) -> str:
        return str(self)

    @staticmethod
    def parse_profile(text: str) -> "Profile":
        match = re.match(PROFILE_REGEX, text.strip(), re.VERBOSE)
        if match is None:
            raise ValueError(f"Invalid profile '{text.strip()}'")
        return Profile(match.group("type") if match.group("type")
                       else Profile.TYPE_NAME,
                       match.group("name"),
                       set(match.group("edids").split(",")),
                       shlex.split(match.group("args")))

    @staticmethod
    def load_profiles() -> Dict[str, "Profile"]:
        profiles: Dict[str, Profile] = {}
        try:
            with open(CONFIG_PATH, "r") as config_file:
                for line in config_file:
                    profile = Profile.parse_profile(line)
                    profiles[profile.name] = profile
        except FileNotFoundError:
            print(f"{CONFIG_PATH}: Config file does not exist", file=stderr)
        return profiles

    @staticmethod
    def save_profiles(profiles: Dict[str, "Profile"]) -> None:
        makedirs(path.dirname(CONFIG_PATH), exist_ok=True)
        with open(CONFIG_PATH, "w") as config_file:
            for profile in profiles.values():
                config_file.write(profile.serialize())

    @staticmethod
    def auto() -> "Profile":
        return Profile(Profile.TYPE_NAME, "auto", set(), ["--auto"])


def print_usage() -> None:
    print(USAGE)


def print_help() -> None:
    print(HELP)


def print_status() -> None:
    outputs = Output.load_outputs()
    profiles = Profile.load_profiles()
    for profile in profiles.values():
        type = profile.is_detected(outputs)
        print(profile.name,
              ", ".join(map(lambda e: f"{e.name}[{e.serial}]",
                            map(parse_edid, profile.edids))),
              f"(detected {type})" if type else "")


def save_profile(type: str, name: str, args: List[str]) -> None:
    outputs = Output.load_outputs()
    profiles = Profile.load_profiles()
    if re.match(r"^[\w-]+$", name) is None:
        raise ValueError("Invalid profile name")
    if not args:
        raise ValueError("XRandr arguments are required")
    if type not in {Profile.TYPE_NAME, Profile.TYPE_SERIAL}:
        raise ValueError("Invalid type")
    if type == Profile.TYPE_NAME and None in Output.connected_names(outputs):
        print("Some outputs have no assigned name, using serial for those",
              file=stderr)
    profiles[name] = Profile(type, name, Output.connected_edids(outputs), args)
    Profile.save_profiles(profiles)
    print(f"Profile {name} saved")


def delete_profile(name: str) -> None:
    profiles = Profile.load_profiles()
    del profiles[name]
    Profile.save_profiles(profiles)
    print(f"Profile {name} deleted")


def set_profile(name: str) -> None:
    profiles = Profile.load_profiles()
    profiles[name].set_profile(Output.load_outputs())


def copy_profile(type: str, src_name: str, dst_name: str) -> None:
    profiles = Profile.load_profiles()
    if src_name not in profiles:
        raise ValueError("Src name not found")
    save_profile(type, dst_name, profiles[src_name].args)


def profile_auto() -> None:
    outputs = Output.load_outputs()
    profiles = Profile.load_profiles()
    for profile in profiles.values():
        if profile.is_detected(outputs):
            profile.set_profile(outputs)
            return
    print("No profile detected, running 'xrandr --auto'")
    Profile.auto().set_profile([])


if __name__ == "__main__":
    try:
        if len(argv) == 1 or len(argv) == 2 and argv[1] == "status":
            print_status()
        elif len(argv) == 2 and argv[1] == "help":
            print_help()
        elif len(argv) >= 4 and argv[1] == "save":
            if argv[2] == "--serial":
                name = argv[3]
                type = Profile.TYPE_SERIAL
                rest = argv[4:]
            else:
                name = argv[2]
                type = Profile.TYPE_NAME
                rest = argv[3:]
            save_profile(type, name, rest)
        elif len(argv) == 3 and argv[1] == "delete":
            delete_profile(argv[2])
        elif len(argv) == 3 and argv[1] == "set":
            set_profile(argv[2])
        elif len(argv) >= 4 and argv[1] == "copy":
            if argv[2] == "--serial":
                copy_profile(Profile.TYPE_SERIAL, argv[3], argv[4])
            else:
                copy_profile(Profile.TYPE_NAME, argv[2], argv[3])
        elif len(argv) == 2 and argv[1] == "auto":
            profile_auto()
        else:
            print_usage()
            exit(1)
        exit(0)
    except OSError as e:
        if e.filename:
            print(f"{e.filename}: ", end="", file=stderr)
        print(e.strerror, file=stderr)
    except ValueError as e:
        print(str(e), file=stderr)
    except KeyError as e:
        print(f"Profile {e} not found", file=stderr)
    exit(1)
